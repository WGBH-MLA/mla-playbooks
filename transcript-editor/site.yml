---
# This playbook deploys the application stack required for Transcript Editor

- name: add the env vars to .bashrc
  hosts: webservers
  remote_user: ec2-user
  become: false
  vars_files:
    - ../env_vars/vars.yml
    - ../env_vars/vault.yml
  vars_prompt:
    - name: project_id
      prompt: "What is the PROJECT_ID for this transcript-editor instance?"
      private: false
    - name: db_host
      prompt: "What is the RDS DB endpoint for the site's DB_HOST?"
      private: false
  tasks:
    - lineinfile:
        dest: ~/.bashrc
        regexp: '^export DB_HOST={{db_host}}'
        line: "export DB_HOST={{db_host}}"
    - lineinfile:
        dest: ~/.bashrc
        regexp: '^export DB_NAME={{transcript_editor_db_name}}'
        line: "export DB_NAME={{transcript_editor_db_name}}"
    - lineinfile:
        dest: ~/.bashrc
        regexp: '^export DB_USER={{transcript_editor_db_user}}'
        line: "export DB_USER={{transcript_editor_db_user}}"
    - lineinfile:
        dest: ~/.bashrc
        regexp: '^export DB_PASS={{transcript_editor_db_pass}}'
        line: "export DB_PASS={{transcript_editor_db_pass}}"
    - lineinfile:
        dest: ~/.bashrc
        regexp: '^export RAILS_ENV={{transcript_editor_rails_env}}'
        line: "export RAILS_ENV={{transcript_editor_rails_env}}"
    - lineinfile:
        dest: ~/.bashrc
        regexp: '^export SECRET_KEY_BASE={{transcript_editor_secret_key_base}}'
        line: "export SECRET_KEY_BASE={{transcript_editor_secret_key_base}}"
    - lineinfile:
        dest: ~/.bashrc
        regexp: '^export PROJECT_ID={{project_id}}'
        line: "export PROJECT_ID={{project_id}}"
  tags:
    - env_vars

- name: Install build tools
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - yum:
        name: "@Development tools"
        state: present

- name: install and upgrade yum packages
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - yum: { name: '*', state: latest }
    - yum: { name: 'ruby20', state: removed }
    - yum: { name: 'zlib-devel', state: present }
    - yum: { name: 'openssl-devel', state: present }
    - yum: { name: 'ruby-devel', state: present }
    - yum: { name: 'libcurl-devel', state: present }
    - yum: { name: 'httpd', state: present }
    - yum: { name: 'httpd-devel', state: present }
    - yum: { name: 'apr-devel', state: present }
    - yum: { name: 'apr-util-devel', state: present }
    - yum: { name: 'postgresql-devel', state: present }
  tags:
    - yum-packages

- name: Install Git
  hosts: webservers
  remote_user: ec2-user
  roles:
    - { role: geerlingguy.git, become: true }
  tags:
    - git

- name: Configure servers with RVM ruby support
  hosts: webservers
  remote_user: ec2-user
  become: false
  roles:
    - { role: rvm.ruby,
        tags: ruby,
        become: true,
        rvm1_rubies: ['ruby-2.3.0'],
        rvm1_bundler_install: true,
        rvm1_user: root,
        rvm1_install_flags: '--auto-dotfiles',
        rvm1_install_path: /usr/local/rvm,
      }
  tags:
    - rvm

- name: Install Phusion Passenger Gem
  hosts: webservers
  remote_user: ec2-user
  become: false
  tasks:
    - shell: rvmsudo gem install passenger:6.0.2
  tags:
    - passenger

- name: Install Apache Webserver
  hosts: webservers
  remote_user: ec2-user
  become: false
  tasks:
    - shell: rvmsudo passenger-install-apache2-module --auto
  tags:
    - passenger-install-apache2-module

- name: Add passenger.conf config file
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - file: { state: directory, path: "/etc/httpd/conf.d", owner: root }
    - template:
        src: "templates/etc/httpd/conf.d/passenger.conf"
        dest: "/etc/httpd/conf.d/passenger.conf"
  tags: passenger.conf

- name: create and chown approot
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - file: { state: directory, path: "/var/www/transcript-editor", owner: ec2-user }
  tags:
    - chowned

- name: create and chown shared
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - file: { state: directory, path: "/var/www/transcript-editor/shared", owner: ec2-user }
  tags:
    - chowned

# # Required for nokogiri gem install
- name: Install patch
  hosts: webservers
  remote_user: ec2-user
  roles:
    - { role: patch, become: true }

- name: Config apache virtual host
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - file:
        state: directory
        path: /etc/httpd/sites-available
    - file:
        state: directory
        path: /etc/httpd/sites-enabled
    - template:
        src: "templates/etc/httpd/sites-available/transcript-editor.conf"
        dest: "/etc/httpd/sites-available/transcript-editor.conf"
    - file:
        state: link
        src: "/etc/httpd/sites-available/transcript-editor.conf"
        dest: "/etc/httpd/sites-enabled/transcript-editor.conf"
    - lineinfile:
        dest: /etc/httpd/conf/httpd.conf
        regexp: 'include \/etc\/httpd\/sites-enabled\/'
        line: "include /etc/httpd/sites-enabled/"
  tags:
    - apache-vhost-config

- name: Create capistrano shared directories and files
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - file:
        state: directory
        path: /var/www/transcript-editor/shared/config
        owner: ec2-user
        group: ec2-user
        force: yes
    - template:
        src: "templates/config/application.yml"
        dest: "/var/www/transcript-editor/shared/config/application.yml"
    - template:
        src: "templates/config/database.yml"
        dest: "/var/www/transcript-editor/shared/config/database.yml"
  tags:
    - capistrano

- name: Install nvm and node
  hosts: webservers
  remote_user: ec2-user
  become: false
  tasks:
    - name: install nvm
      shell:  >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"
    - name: install node
      shell: source /home/ec2-user/.nvm/nvm.sh && nvm install 11.15.0
      args:
        executable: /bin/bash

- name: configure logrotate for httpd logs
  hosts: webservers
  remote_user: ec2-user
  become: true
  tasks:
    - template:
        src: templates/etc/logrotate.d/httpd
        dest: /etc/logrotate.d/httpd
    - template:
        src: templates/etc/cron.hourly/logrotate
        dest: /etc/cron.hourly/logrotate
        mode: 0755
  tags:
    - logrotate

- name: restart httpd
  hosts: webservers
  remote_user: ec2-user
  become: false
  tasks:
    - shell: rvmsudo /usr/sbin/apachectl restart
  tags:
    - restart httpd